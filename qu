{
  "easy": [
  {
    "q": "ما هي الدالة الخاصة المستخدمة لتهيئة كائن جديد (Constructor) في بايثون؟",
    "options": [
      "__init__()",
      "__new__()",
      "__create__()"
    ],
    "correct": 0,
    "exp": "الدالة __init__() تُستدعى بعد إنشاء الكائن لتهيئة خصائصه."
  },
  {
    "q": "ما هي الدالة التي تُستخدم لإضافة عنصر في نهاية القائمة (List)؟",
    "options": [
      "insert()",
      "add()",
      "append()"
    ],
    "correct": 2,
    "exp": "الدالة append() هي الطريقة القياسية لإضافة عنصر في نهاية القائمة."
  },
  {
    "q": "ما هو نوع الاستثناء (Exception) الذي يتم رفعه عند محاولة الوصول إلى مفتاح غير موجود في القاموس (Dictionary)؟",
    "options": [
      "IndexError",
      "KeyError",
      "AttributeError"
    ],
    "correct": 1,
    "exp": "يتم رفع استثناء KeyError عند محاولة استرداد قيمة باستخدام مفتاح غير موجود في القاموس."
  },
  {
    "q": "ما هي الدالة الخاصة التي يتم استدعاؤها عند دخول كتلة with في مدير السياق (Context Manager)؟",
    "options": [
      "__exit__()",
      "__start__()",
      "__enter__()"
    ],
    "correct": 2,
    "exp": "الدالة __enter__() تُنفذ في بداية كتلة with وتُرجع الكائن المراد استخدامه."
  },
  {
    "q": "أي كلمة مفتاحية تُستخدم لإنهاء حلقة (Loop) بشكل فوري دون إكمال تكرارها الحالي؟",
    "options": [
      "continue",
      "exit",
      "break"
    ],
    "correct": 2,
    "exp": "تُستخدم الكلمة المفتاحية break للخروج من أقرب حلقة محيطة بها."
  },
  {
    "q": "ما هي الطريقة الصحيحة لتعريف دالة ذات وسيط (Argument) افتراضي؟",
    "options": [
      "def func(a, b=1):",
      "def func(a=1, b):",
      "def func(a, b==1):"
    ],
    "correct": 0,
    "exp": "يجب أن تكون الوسائط الافتراضية في نهاية قائمة الوسائط (التي ليس لها قيمة افتراضية)."
  },
  {
    "q": "ما هي الدالة التي يجب استخدامها لاستدعاء دالة من الفئة الأب (Parent Class) ضمن الفئة الابن (Child Class)؟",
    "options": [
      "parent()",
      "super()",
      "self()"
    ],
    "correct": 1,
    "exp": "تُستخدم الدالة super() للوصول إلى الميراث من الفئة الأب، وغالباً ما تُستخدم في __init__()."
  },
  {
    "q": "ما هي الخاصية الرئيسية التي تُميز الـ tuple عن الـ list؟",
    "options": [
      "قابلة للتغيير (Mutable)",
      "غير قابلة للتغيير (Immutable)",
      "تسمح بأنواع بيانات مختلفة"
    ],
    "correct": 1,
    "exp": "الـ tuple غير قابلة للتغيير بعد إنشائها، مما يجعلها أكثر كفاءة في بعض الحالات."
  },
  {
    "q": "في عبارة try-except، متى يتم تنفيذ كتلة finally؟",
    "options": [
      "فقط إذا لم يحدث استثناء",
      "فقط إذا حدث استثناء",
      "دائماً سواء حدث استثناء أم لا"
    ],
    "correct": 2,
    "exp": "كتلة finally تُنفذ دائماً، بغض النظر عما إذا كان قد تم رفع استثناء أم لا، وهي مفيدة لتنظيف الموارد."
  },
  {
    "q": "أي من التعبيرات التالية يمثل طريقة كتابة (List Comprehension) صحيحة لإنشاء قائمة من الأعداد الزوجية حتى 10؟",
    "options": [
      "[x for x in range(11) if x % 2 == 0]",
      "(x for x in range(11) if x % 2 == 0)",
      "{x for x in range(11) if x % 2 == 0}"
    ],
    "correct": 0,
    "exp": "يتم استخدام الأقواس المربعة '[]' في List Comprehension، أما الأقواس الدائرية '()' فتُنشئ مُوَلّد (Generator)."
  },
  {
    "q": "ما هي الكلمة المفتاحية التي تُميز دالة المولد (Generator) عن الدالة العادية؟",
    "options": [
      "return",
      "yield",
      "generate"
    ],
    "correct": 1,
    "exp": "الكلمة المفتاحية yield تُستخدم لإيقاف تنفيذ الدالة بشكل مؤقت وإرجاع قيمة، مما يحولها إلى مولد."
  },
  {
    "q": "ما هي الكلمة المفتاحية المستخدمة لتعديل متغير عام (Global Variable) داخل دالة؟",
    "options": [
      "external",
      "nonlocal",
      "global"
    ],
    "correct": 2,
    "exp": "الكلمة المفتاحية global تسمح بتعديل المتغيرات العامة من داخل نطاق دالة محلية."
  },
  {
    "q": "ماذا تفعل الدالة pop() عند تطبيقها على قاموس؟",
    "options": [
      "تحذف آخر عنصر",
      "تُرجع وتحذف القيمة المرتبطة بمفتاح محدد",
      "تحذف القاموس بالكامل"
    ],
    "correct": 1,
    "exp": "تُستخدم pop(key) لإزالة عنصر معين من القاموس بناءً على المفتاح وإرجاع القيمة المقابلة."
  },
  {
    "q": "أي من أنواع البيانات التالية هو نوع بيانات غير قابل للتغيير (Immutable)؟",
    "options": [
      "List",
      "Set",
      "String"
    ],
    "correct": 2,
    "exp": "سلاسل النصوص (Strings) في بايثون غير قابلة للتغيير، بينما القوائم (Lists) والمجموعات (Sets) قابلة للتغيير."
  },
  {
    "q": "ما هي النتيجة المتوقعة للتعبير 5 // 2 في بايثون؟",
    "options": [
      "2.5",
      "2",
      "1"
    ],
    "correct": 1,
    "exp": "العملية // هي قسمة عددية (Floor Division) تُرجع الجزء الصحيح من الناتج."
  },
  {
    "q": "ما هي الدالة التي تُستخدم لتحويل كائن قابل للتكرار (Iterable) إلى مجموعة (Set)؟",
    "options": [
      "list()",
      "set()",
      "dict()"
    ],
    "correct": 1,
    "exp": "الدالة set() تُنشئ مجموعة جديدة من العناصر القابلة للتكرار وتزيل التكرارات."
  },
  {
    "q": "ما هو دور الدالة __str__() في الفئات (Classes)؟",
    "options": [
      "تعريف طريقة مقارنة الكائنات",
      "إرجاع تمثيل 'رسمي' للكائن",
      "إرجاع تمثيل 'سهل القراءة' للكائن"
    ],
    "correct": 2,
    "exp": "تُستخدم __str__() لإرجاع تمثيل سلسلة نصية قابل للقراءة للكائن، وغالباً ما تُستدعى بواسطة دالة print()."
  },
  {
    "q": "ما هي الكلمة المفتاحية المستخدمة في بايثون لتعريف كتلة من الشروط المتعددة بعد if؟",
    "options": [
      "else if",
      "elif",
      "then"
    ],
    "correct": 1,
    "exp": "الكلمة المفتاحية elif تُستخدم لاختبار شروط إضافية بعد الشرط الأساسي if."
  },
  {
    "q": "ما هو دور الدالة lambda؟",
    "options": [
      "تعريف دالة بدون اسم وبجمل متعددة",
      "تعريف دالة صغيرة مجهولة (Anonymous) في سطر واحد",
      "استدعاء دالة بشكل غير متزامن"
    ],
    "correct": 1,
    "exp": "تُستخدم lambda لإنشاء دوال صغيرة مجهولة (Anonymous functions) يمكن أن تحتوي على تعبير واحد فقط."
  },
  {
    "q": "ماذا تفعل الدالة remove() عند تطبيقها على قائمة ولم يتم العثور على العنصر المحدد؟",
    "options": [
      "تتجاهل الأمر",
      "ترفع استثناء ValueError",
      "تُرجع None"
    ],
    "correct": 1,
    "exp": "الدالة remove() تبحث عن القيمة وتحذف أول ظهور لها. إذا لم يتم العثور على القيمة، يتم رفع استثناء ValueError."
  },
  {
    "q": "ما هو نوع البيانات الذي يُستخدم لتمثيل قيمة 'صحيح' أو 'خطأ'؟",
    "options": [
      "Float",
      "Boolean (bool)",
      "Integer (int)"
    ],
    "correct": 1,
    "exp": "نوع البيانات Boolean (bool) يمثل إحدى قيمتين فقط: True أو False."
  },
  {
    "q": "ما هو الرمز الذي يُستخدم لعملية الأس (Exponentiation) في بايثون؟",
    "options": [
      "**",
      "^",
      "//"
    ],
    "correct": 0,
    "exp": "الرمز ** يُستخدم لحساب قوة عدد (الأس)."
  },
  {
    "q": "ما هو الغرض من الدالة __del__() في الفئة (Class)؟",
    "options": [
      "تُستخدم لحذف الكائن يدوياً",
      "تُستخدم قبل حذف الكائن (Destructor)",
      "إعادة ضبط خصائص الكائن"
    ],
    "correct": 1,
    "exp": "الدالة __del__() تُستدعى عندما يتم تدمير الكائن بواسطة جامع القمامة (Garbage Collector)."
  },
  {
    "q": "ما هي الدالة التي تُرجع قائمة بجميع مفاتيح القاموس (Dictionary)؟",
    "options": [
      "values()",
      "keys()",
      "items()"
    ],
    "correct": 1,
    "exp": "الدالة keys() تُرجع طريقة عرض جديدة لـ مفاتيح القاموس."
  },
  {
    "q": "لتعريف دالة لا تفعل شيئاً حالياً، ما هي الكلمة المفتاحية التي يمكن استخدامها كجسم للدالة؟",
    "options": [
      "none",
      "pass",
      "skip"
    ],
    "correct": 1,
    "exp": "تُستخدم الكلمة المفتاحية pass كعنصر نائب (Placeholder) لتعريف كتلة فارغة."
  },
  {
    "q": "ما هي النتيجة المتوقعة لـ 'Hello' + 'World' في بايثون؟",
    "options": [
      "Hello World",
      "HelloWorld",
      "Hello, World"
    ],
    "correct": 1,
    "exp": "يؤدي عامل التشغيل + إلى دمج (Concatenate) سلسلتين نصيتين مباشرة بدون مسافة."
  },
  {
    "q": "ما هو الرمز الذي يُستخدم لبدء التعليقات متعددة الأسطر (Multi-line Comments) في بايثون؟",
    "options": [
      "//",
      "#",
      "''' (ثلاث علامات اقتباس) أو \"\"\" (ثلاث علامات اقتباس مزدوجة)"
    ],
    "correct": 2,
    "exp": "يتم استخدام علامات الاقتباس الثلاثية، وعادة ما يُطلق عليها سلاسل التوثيق (Docstrings)، لتعليقات متعددة الأسطر أو توثيق الدوال والفئات."
  },
  {
    "q": "ماذا تعني `self` كوسيط أول لدوال الفئة (Class Methods)؟",
    "options": [
      "تشير إلى الفئة الأم",
      "تشير إلى المثيل (Instance) الحالي للكائن",
      "تشير إلى مساحة الاسم العامة (Global Namespace)"
    ],
    "correct": 1,
    "exp": "الوسيط self يشير إلى المثيل الذي تُستدعى عليه الدالة، وهو ضروري للوصول إلى خصائص هذا المثيل."
  },
  {
    "q": "ما هو نوع البيانات الذي لا يسمح بالعناصر المكررة؟",
    "options": [
      "List",
      "Set",
      "Tuple"
    ],
    "correct": 1,
    "exp": "المجموعة (Set) هي مجموعة غير مرتبة من العناصر الفريدة."
  },
  {
    "q": "ماذا يعني **kwargs في تعريف الدالة؟",
    "options": [
      "تمرير عدد متغير من الوسائط الموضعية (Positional Arguments)",
      "تمرير عدد متغير من الوسائط الكلمات المفتاحية (Keyword Arguments)",
      "تمرير مصفوفة من الوسائط"
    ],
    "correct": 1,
    "exp": "تسمح **kwargs للدالة بقبول عدد متغير من الوسائط الكلمات المفتاحية، والتي يتم تجميعها في قاموس."
  },
  {
    "q": "أي وحدة (Module) قياسية تُستخدم للتعامل مع التعبيرات النمطية (Regular Expressions) في بايثون؟",
    "options": [
      "string",
      "re",
      "regex"
    ],
    "correct": 1,
    "exp": "الوحدة القياسية re تُستخدم للعمل مع التعبيرات النمطية."
  },
  {
    "q": "لإنشاء نسخة ضحلة (Shallow Copy) لقائمة، أي طريقة هي الأكثر شيوعاً؟",
    "options": [
      "استخدام الدالة copy.deepcopy()",
      "استخدام الفهرسة بالتقطيع [:]",
      "إسناد القائمة مباشرة (list2 = list1)"
    ],
    "correct": 1,
    "exp": "استخدام الفهرسة بالتقطيع (Slicing) [:] يُنشئ نسخة ضحلة جديدة من القائمة."
  },
  {
    "q": "ما هو الرمز الذي يُستخدم لبدء كتلة دالة أو كتلة شرطية؟",
    "options": [
      "{}",
      ":",
      ";"
    ],
    "correct": 1,
    "exp": "الرمز ':' يُستخدم للإشارة إلى بداية كتلة جديدة في بايثون، متبوعاً بمسافة بادئة (Indentation)."
  },
  {
    "q": "أي كلمة مفتاحية تُستخدم لتمرير استثناء (Exception) مصطنع؟",
    "options": [
      "throw",
      "raise",
      "except"
    ],
    "correct": 1,
    "exp": "تُستخدم الكلمة المفتاحية raise لرفع استثناءات مخصصة أو قائمة."
  },
  {
    "q": "ماذا يعني *args في تعريف الدالة؟",
    "options": [
      "تمرير عدد ثابت من الوسائط",
      "تمرير عدد متغير من الوسائط الموضعية (Positional Arguments)",
      "تمرير قاموس من الوسائط"
    ],
    "correct": 1,
    "exp": "تسمح *args للدالة بقبول عدد متغير من الوسائط الموضعية، والتي يتم تجميعها في tuple."
  },
  {
    "q": "ما هي الدالة الخاصة التي تُستدعى عند محاولة استخدام الكائن كدالة (Callable)؟",
    "options": [
      "__run__()",
      "__call__()",
      "__exec__()"
    ],
    "correct": 1,
    "exp": "تُستخدم __call__() لجعل مثيل (Instance) الفئة يعمل مثل الدالة."
  },
  {
    "q": "ما هو نوع البيانات الذي تُرجعه الدالة range()؟",
    "options": [
      "List",
      "Generator",
      "Range"
    ],
    "correct": 2,
    "exp": "الدالة range() تُرجع كائن Range، وهو نوع بيانات قابل للتكرار وغير قابل للتغيير يُستخدم لتمثيل تسلسل الأرقام."
  },
  {
    "q": "أي عامل تشغيل (Operator) يُستخدم للتحقق من تطابق القيمة والنوع؟",
    "options": [
      "==",
      "is",
      "="
    ],
    "correct": 0,
    "exp": "العامل == يُقارن القيمة، بينما العامل is يُقارن الهوية (Identity) للكائنين."
  },
  {
    "q": "ما هي الدالة التي تُستخدم لإزالة العنصر الأخير من القائمة وإرجاعه؟",
    "options": [
      "remove()",
      "pop()",
      "discard()"
    ],
    "correct": 1,
    "exp": "تُرجع pop() العنصر في فهرس محدد أو العنصر الأخير إذا لم يتم تحديد فهرس، ثم تُزيله من القائمة."
  },
  {
    "q": "ماذا تفعل الكلمة المفتاحية `nonlocal`؟",
    "options": [
      "تعديل متغير عام",
      "تعديل متغير في الدالة الأب غير العامة",
      "منع تغيير المتغير"
    ],
    "correct": 1,
    "exp": "تسمح nonlocal بتعديل المتغيرات غير العامة الموجودة في نطاق دالة مُغلقة (Enclosing function)."
  },
  {
    "q": "ما هو دور الدالة __getitem__() في الفئات (Classes)؟",
    "options": [
      "تمكين الفهرسة (Indexing) والتقطيع (Slicing) على الكائن",
      "الحصول على عدد العناصر في الكائن",
      "الحصول على نوع بيانات الكائن"
    ],
    "correct": 0,
    "exp": "تُستخدم __getitem__() لتمكين الوصول إلى العناصر باستخدام الأقواس المربعة، مثل x[key]."
  },
  {
    "q": "لإضافة عنصرين من قوائم مختلفة في قاموس، أي دالة تُستخدم لدمج عناصر قابلة للتكرار؟",
    "options": [
      "combine()",
      "zip()",
      "merge()"
    ],
    "correct": 1,
    "exp": "الدالة zip() تجمع عناصر من عدد من الكائنات القابلة للتكرار، وتُستخدم غالباً لإنشاء أزواج مفتاح-قيمة للقاموس."
  },
  {
    "q": "ما هو نوع بيانات متغير `x` في العبارة `x = 10j`؟",
    "options": [
      "Float",
      "Complex",
      "Integer"
    ],
    "correct": 1,
    "exp": "يُستخدم اللاحقة j أو J لتمثيل الأعداد المركبة (Complex numbers) في بايثون."
  },
  {
    "q": "أي كلمة مفتاحية تُستخدم لتعريف الفئة (Class)؟",
    "options": [
      "function",
      "class",
      "struct"
    ],
    "correct": 1,
    "exp": "الكلمة المفتاحية class تُستخدم لتعريف هيكل فئة جديد."
  },
  {
    "q": "ما هي النتيجة المتوقعة للتعبير 10 % 3؟",
    "options": [
      "3.33",
      "1",
      "0"
    ],
    "correct": 1,
    "exp": "العامل % هو عامل باقي القسمة (Modulo) ويُرجع باقي قسمة 10 على 3، وهو 1."
  },
  {
    "q": "ماذا تفعل الدالة len()؟",
    "options": [
      "تحويل الكائن إلى سلسلة نصية",
      "تُرجع عدد العناصر في كائن",
      "تُرجع الحد الأدنى لقيمة في كائن"
    ],
    "correct": 1,
    "exp": "الدالة len() تُرجع طول (عدد العناصر) في كائن مثل قائمة، قاموس، أو سلسلة نصية."
  },
  {
    "q": "ما هي الدالة الخاصة التي تُستدعى عند محاولة استخدام العامل '+' بين كائنين؟",
    "options": [
      "__add__()",
      "__sum__()",
      "__concat__()"
    ],
    "correct": 0,
    "exp": "تُستخدم __add__() لتخصيص سلوك الكائن عند استخدام العامل + (Overloading the '+' operator)."
  },
  {
    "q": "أي من الحلقات (Loops) التالية تُستخدم بشكل أساسي للتكرار عبر تسلسل (Sequence)؟",
    "options": [
      "while loop",
      "do-while loop (غير موجود في بايثون)",
      "for loop"
    ],
    "correct": 2,
    "exp": "حلقة for تُستخدم للتكرار على العناصر في تسلسل (مثل قائمة أو سلسلة نصية) أو أي كائن قابل للتكرار."
  },
  {
    "q": "ما هي الدالة التي تُستخدم لفرز قائمة (List) في مكانها (in-place)؟",
    "options": [
      "sorted()",
      "sort()",
      "order()"
    ],
    "correct": 1,
    "exp": "الدالة sort() تُغير ترتيب عناصر القائمة الأصلية مباشرة (in-place) ولا تُرجع شيئاً."
  },
  {
    "q": "للوصول إلى عنصر في قائمة أو سلسلة نصية، ما الذي يُمثل أول فهرس (Index)؟",
    "options": [
      "1",
      "0",
      "الأخير"
    ],
    "correct": 1,
    "exp": "في بايثون، تبدأ الفهارس دائماً من 0."
  },
  {
    "q": "ما هو نوع الاستثناء الذي يتم رفعه عند محاولة إجراء عملية غير مدعومة على نوع بيانات ما، مثل جمع عدد وسلسلة نصية؟",
    "options": [
      "ValueError",
      "TypeError",
      "SyntaxError"
    ],
    "correct": 1,
    "exp": "يتم رفع TypeError عندما يتم تطبيق عملية أو دالة على كائن من النوع غير المناسب."
  },
  {
    "q": "ما هي الطريقة الصحيحة لتعريف دالة ديكوراتور (Decorator)؟",
    "options": [
      "استخدام الرمز $",
      "استخدام الرمز @",
      "استخدام الرمز #"
    ],
    "correct": 1,
    "exp": "يُستخدم الرمز @ متبوعاً باسم الدالة الديكوراتور لتطبيقه على دالة أخرى."
  },
  {
    "q": "ما هو دور الدالة __repr__() في الفئات (Classes)؟",
    "options": [
      "إرجاع تمثيل 'سهل القراءة' للكائن",
      "إرجاع تمثيل 'رسمي ومفصل' للكائن",
      "إرجاع طول الكائن"
    ],
    "correct": 1,
    "exp": "تُستخدم __repr__() لإرجاع تمثيل سلسلة نصية رسمي للكائن، يكون قابلاً لإعادة الإنشاء إن أمكن."
  },
  {
    "q": "ما هي القيمة الافتراضية للوسيط `mode` عند فتح ملف باستخدام `open()`؟",
    "options": [
      "'w' (كتابة)",
      "'r' (قراءة)",
      "'a' (إلحاق)"
    ],
    "correct": 1,
    "exp": "الوضع الافتراضي عند فتح ملف هو 'r' (قراءة)، مما يعني أن الملف يجب أن يكون موجوداً."
  },
  {
    "q": "ماذا يعني التعبيرين `is` و `==` عند المقارنة بين كائنين؟",
    "options": [
      "كلاهما يقارن القيمة",
      "`==` يقارن القيمة، و `is` يقارن الهوية (Identity)",
      "`==` يقارن الهوية، و `is` يقارن القيمة"
    ],
    "correct": 1,
    "exp": "العامل == يتحقق من تساوي القيمة، بينما العامل is يتحقق مما إذا كان الكائنان يشيران إلى نفس الكائن في الذاكرة."
  },
  {
    "q": "أي صيغة تُستخدم لإجراء 'Unpacking' (تفريغ) لعناصر tuple في متغيرات متعددة؟",
    "options": [
      "a, b, c = my_tuple",
      "a = my_tuple[0]; b = my_tuple[1]",
      "unpack(my_tuple)"
    ],
    "correct": 0,
    "exp": "تفريغ التسلسل هو ميزة تسمح بإسناد عناصر التسلسل مباشرة إلى متغيرات متعددة في سطر واحد."
  },
  {
    "q": "أي نوع من الأخطاء لا يمنع تشغيل البرنامج ولكنه يشير إلى منطق غير صحيح؟",
    "options": [
      "Syntax Error",
      "Logical Error",
      "Typing Error"
    ],
    "correct": 1,
    "exp": "الخطأ المنطقي (Logical Error) هو خطأ في تصميم البرنامج يؤدي إلى نتائج غير صحيحة دون رفع استثناء."
  },
  {
    "q": "ما هي الوحدة (Module) القياسية التي توفر دوال رياضية متقدمة (مثل الجيب، جيب التمام، الجذر التربيعي)؟",
    "options": [
      "math",
      "calc",
      "numerics"
    ],
    "correct": 0,
    "exp": "الوحدة math توفر الوصول إلى الدوال الرياضية المعرفة بالمعيار C."
  },
  {
    "q": "ما هو الغرض من `docstrings` في بايثون؟",
    "options": [
      "تعريف متغيرات ثابتة",
      "توفير توثيق للدوال والفئات والوحدات",
      "تحديد نوع البيانات"
    ],
    "correct": 1,
    "exp": "سلاسل التوثيق (Docstrings) هي سلاسل نصية توضع كأول عبارة في تعريف وحدة أو فئة أو دالة لتوفير التوثيق."
  },
  {
    "q": "لتحويل رقم عشري (Float) إلى رقم صحيح (Integer)، ما هي الدالة التي تُستخدم؟",
    "options": [
      "str()",
      "int()",
      "float()"
    ],
    "correct": 1,
    "exp": "الدالة int() تحول القيمة إلى عدد صحيح (عن طريق اقتطاع الجزء العشري)."
  },
  {
    "q": "أي كلمة مفتاحية تُستخدم لإنشاء كتلة من التعليمات البرمجية لاختبار الاستثناءات (Exceptions)؟",
    "options": [
      "check",
      "except",
      "try"
    ],
    "correct": 2,
    "exp": "الكلمة المفتاحية try تُستخدم لتحديد كتلة من التعليمات البرمجية التي قد تثير استثناءً."
  },
  {
    "q": "ما هو دور دالة `enumerate()`؟",
    "options": [
      "تُرجع عدد العناصر في كائن قابل للتكرار",
      "تُرجع قيمة منطقية (True/False) حول التكرار",
      "تضيف عداداً إلى كائن قابل للتكرار"
    ],
    "correct": 2,
    "exp": "تُرجع enumerate() أزواجاً من (العد، القيمة) عند التكرار على تسلسل."
  },
  {
    "q": "ما هي الدالة التي تُستخدم لإنشاء قاموس من أزواج مفتاح-قيمة مجمعة في قوائم منفصلة؟",
    "options": [
      "dict.fromkeys()",
      "dict(zip())",
      "dict.merge()"
    ],
    "correct": 1,
    "exp": "تقوم zip() بدمج القوائم إلى أزواج، ويمكن تحويلها مباشرة إلى قاموس باستخدام dict()."
  },
  {
    "q": "ماذا يحدث عند استخدام الكلمة المفتاحية `continue` داخل حلقة؟",
    "options": [
      "تنهي الحلقة بالكامل",
      "تتخطى التكرار الحالي وتبدأ التكرار التالي",
      "تعود إلى بداية الحلقة دون تخطي شيء"
    ],
    "correct": 1,
    "exp": "تُستخدم continue لتخطي بقية التعليمات البرمجية في التكرار الحالي والانتقال إلى التكرار التالي للحلقة."
  },
  {
    "q": "ما هو نوع البيانات الذي يُنشأ باستخدام الأقواس المعقوفة `{}` التي تحتوي على قيم مفصولة بفواصل؟",
    "options": [
      "List",
      "Set",
      "Tuple"
    ],
    "correct": 1,
    "exp": "الأقواس المعقوفة `{}` تُنشئ مجموعة (Set)، باستثناء حالة استخدامها لأزواج مفتاح-قيمة، والتي تُنشئ قاموساً (Dictionary)."
  },
  {
    "q": "ما هي الدالة الخاصة التي تُستدعى عند محاولة التحقق من طول الكائن باستخدام len()؟",
    "options": [
      "__length__()",
      "__count__()",
      "__len__()"
    ],
    "correct": 2,
    "exp": "تُستخدم __len__() لتمكين الكائن من إرجاع طوله عند استدعاء الدالة len()."
  },
  {
    "q": "أي نوع من المتغيرات يمكن مشاركته بين جميع مثيلات (Instances) الفئة؟",
    "options": [
      "Instance Variable",
      "Local Variable",
      "Class Variable"
    ],
    "correct": 2,
    "exp": "متغيرات الفئة (Class Variables) يتم تعريفها داخل الفئة ولكن خارج أي دالة، ويتم مشاركتها بواسطة جميع المثيلات."
  },
  {
    "q": "ما هي الوحدة (Module) التي تُستخدم عادةً للعمل مع المسارات (Paths) ونظام الملفات؟",
    "options": [
      "file_system",
      "os.path",
      "pathlib"
    ],
    "correct": 2,
    "exp": "تُعتبر pathlib هي الواجهة القياسية الموصى بها للتعامل مع مسارات نظام الملفات."
  },
  {
    "q": "ما هي النتيجة المتوقعة للتعبير 3 * 'a'؟",
    "options": [
      "3a",
      "aaa",
      "3 * a"
    ],
    "correct": 1,
    "exp": "يُستخدم عامل التشغيل * لمضاعفة سلسلة نصية، مما ينتج عنه تكرار 'a' ثلاث مرات."
  },
  {
    "q": "أي طريقة تُستخدم لإضافة عنصر إلى مجموعة (Set)؟",
    "options": [
      "append()",
      "add()",
      "insert()"
    ],
    "correct": 1,
    "exp": "الدالة add() هي الطريقة الصحيحة لإضافة عنصر واحد إلى مجموعة."
  },
  {
    "q": "ما هو دور الدالة __call__ في بايثون؟",
    "options": [
      "لجعل الكائن قابلاً للاستدعاء مثل دالة",
      "لجعل الكائن قابلاً للمقارنة",
      "لجعل الكائن قابلاً للتكرار"
    ],
    "correct": 0,
    "exp": "تنفيذ __call__ يسمح باستدعاء المثيل مباشرة، مثل my_object()."
  },
  {
    "q": "في البرمجة الشيئية، ماذا تعني كلمة 'Polymorphism' (تعدد الأشكال)؟",
    "options": [
      "قدرة الكائن على أن يكون له العديد من الخصائص",
      "قدرة دالة أو عامل تشغيل على العمل على فئات مختلفة من الكائنات",
      "قدرة الكائن على وراثة الخصائص"
    ],
    "correct": 1,
    "exp": "يشير تعدد الأشكال إلى أن طرقاً أو وظائف مختلفة يمكن أن تتشارك نفس الاسم، مما يسمح للعمليات بالعمل بشكل مختلف بناءً على الكائن الذي تُطبق عليه."
  },
  {
    "q": "لإنشاء قاموس جديد تكون فيه قيم جميع المفاتيح هي نفسها، ما هي دالة القاموس التي يمكن استخدامها؟",
    "options": [
      "update()",
      "fromkeys()",
      "setdefaults()"
    ],
    "correct": 1,
    "exp": "تُنشئ dict.fromkeys(seq, value) قاموساً حيث تكون عناصر seq هي المفاتيح و value هي القيمة الافتراضية لكل مفتاح."
  },
  {
    "q": "ما هي النتيجة المتوقعة للتعبير `[1, 2, 3] * 2`؟",
    "options": [
      "[2, 4, 6]",
      "[1, 2, 3, 1, 2, 3]",
      "خطأ"
    ],
    "correct": 1,
    "exp": "يؤدي عامل التشغيل * على قائمة إلى تكرار القائمة، وليس ضرب العناصر."
  },
  {
    "q": "ما هو الغرض من الدالة `zip()`؟",
    "options": [
      "ضغط الملفات المضغوطة",
      "دمج عناصر من مُكرِّرات متعددة في مجموعات",
      "تقسيم سلسلة نصية"
    ],
    "correct": 1,
    "exp": "تجمع الدالة zip() العناصر في كائنات قابلة للتكرار، وتُرجع كائناً ينتج مجموعات عند التكرار."
  },
  {
    "q": "أي كلمة مفتاحية تُستخدم لتعريف الفئة الأب (Parent Class) عند تعريف فئة ابن (Child Class)؟",
    "options": [
      "باستخدام النقطة `.`",
      "بين قوسين بعد اسم الفئة `()`",
      "باستخدام الكلمة المفتاحية `inherits`"
    ],
    "correct": 1,
    "exp": "يتم تحديد الفئة الأب داخل الأقواس بعد اسم الفئة الابن، مثل `class Child(Parent):`."
  },
  {
    "q": "ما هو دور الدالة `map()`؟",
    "options": [
      "تطبيق دالة على جميع عناصر كائن قابل للتكرار",
      "إنشاء قاموس من كائنين قابلين للتكرار",
      "فرز العناصر"
    ],
    "correct": 0,
    "exp": "تُطبق الدالة map() دالة معينة على كل عنصر من عناصر كائن قابل للتكرار، وتُرجع خريطة (Map Object) بالتنفيذ."
  },
  {
    "q": "في عبارة `try-except`، ماذا تفعل كتلة `else`؟",
    "options": [
      "تُنفذ إذا حدث استثناء",
      "تُنفذ دائماً",
      "تُنفذ إذا لم يحدث استثناء"
    ],
    "correct": 2,
    "exp": "تُنفذ كتلة else إذا تم تنفيذ كتلة try دون رفع أي استثناءات."
  },
  {
    "q": "ما هو الرمز الذي يُستخدم للإشارة إلى أن الدالة هي دالة فئة (Class Method)؟",
    "options": [
      "@property",
      "@staticmethod",
      "@classmethod"
    ],
    "correct": 2,
    "exp": "الديكوراتور @classmethod يُستخدم لتعريف دالة فئة، وتأخذ الفئة نفسها كوسيط أول (عادةً cls)."
  },
  {
    "q": "ما هي الدالة التي تُستخدم لقراءة محتوى ملف بالكامل كسلسلة نصية واحدة؟",
    "options": [
      "readline()",
      "read()",
      "readlines()"
    ],
    "correct": 1,
    "exp": "الدالة read() تقرأ الملف بالكامل وتُرجع محتواه كسلسلة نصية واحدة."
  },
  {
    "q": "ما هو نوع البيانات الذي يُنشأ عند استخدام التعبير `(1, 2, 3)`؟",
    "options": [
      "List",
      "Tuple",
      "Set"
    ],
    "correct": 1,
    "exp": "الأقواس الدائرية `()` تُستخدم لإنشاء tuple."
  },
  {
    "q": "ما هي النتيجة المتوقعة للتعبير `bool(0)`؟",
    "options": [
      "True",
      "False",
      "0"
    ],
    "correct": 1,
    "exp": "القيمة العددية صفر (0) تُعتبر قيمة خاطئة (Falsy) في السياق المنطقي في بايثون."
  },
  {
    "q": "ما هو دور الدالة __iter__() و __next__()؟",
    "options": [
      "جعل الكائن قابلاً للتكرار (Iterable) والمُكرِّر (Iterator)",
      "جعل الكائن قابلاً للمقارنة",
      "تطبيق الديكوراتور على الكائن"
    ],
    "correct": 0,
    "exp": "تنفيذ هاتين الدالتين مطلوب لإنشاء مُكرِّر مخصص (Custom Iterator) يمكن استخدامه في حلقات for."
  },
  {
    "q": "أي من العوامل (Operators) التالية له أعلى أسبقية (Precedence)؟",
    "options": [
      "الجمع (+)",
      "الضرب (*)",
      "الأقواس ()"
    ],
    "correct": 2,
    "exp": "تستخدم الأقواس لتجميع التعبيرات ولها أعلى أسبقية في التنفيذ."
  },
  {
    "q": "ما هي الطريقة القياسية لدمج قائمتين إلى قائمة واحدة؟",
    "options": [
      "استخدام الدالة join()",
      "استخدام العامل +",
      "استخدام الدالة union()"
    ],
    "correct": 1,
    "exp": "يمكن دمج القوائم باستخدام عامل التشغيل + الذي يُنشئ قائمة جديدة تحتوي على عناصر القائمتين."
  },
  {
    "q": "ما هو الرمز الذي يُستخدم للإشارة إلى أن الدالة هي دالة ثابتة (Static Method)؟",
    "options": [
      "@abstractmethod",
      "@staticmethod",
      "@classmethod"
    ],
    "correct": 1,
    "exp": "الديكوراتور @staticmethod يُستخدم لتعريف دالة تنتمي للفئة ولكن لا تحتاج إلى الوصول إلى مثيل الفئة أو الفئة نفسها."
  },
  {
    "q": "ما هي الوظيفة التي تُستخدم لإنشاء تسلسل من الأعداد الصحيحة بين حدين؟",
    "options": [
      "range()",
      "sequence()",
      "numbers()"
    ],
    "correct": 0,
    "exp": "الدالة range() تُنشئ تسلسلاً غير قابل للتغيير من الأرقام، وتُستخدم بشكل شائع في حلقات for."
  },
  {
    "q": "ما هو نوع الاستثناء الذي يتم رفعه عند محاولة الوصول إلى فهرس خارج نطاق القائمة؟",
    "options": [
      "KeyError",
      "IndexError",
      "ValueError"
    ],
    "correct": 1,
    "exp": "يتم رفع IndexError عند محاولة استخدام فهرس غير صالح للقائمة أو السلسلة النصية."
  },
  {
    "q": "في البرمجة الشيئية، ماذا تعني كلمة 'Encapsulation' (التغليف)؟",
    "options": [
      "إخفاء تفاصيل التنفيذ وربط البيانات والدوال التي تعمل عليها",
      "قدرة الكائن على أن يكون له أكثر من نوع",
      "تمرير الخصائص من فئة إلى أخرى"
    ],
    "correct": 0,
    "exp": "التغليف هو مبدأ ربط البيانات (الخصائص) والدوال (الأساليب) التي تعمل على تلك البيانات في وحدة واحدة (الفئة)."
  },
  {
    "q": "ما هو الرمز الذي يُستخدم للوصول إلى متغيرات مثيل (Instance Variables) داخل دالة؟",
    "options": [
      "global.var_name",
      "self.var_name",
      "class.var_name"
    ],
    "correct": 1,
    "exp": "يتم الوصول إلى متغيرات المثيل باستخدام الوسيط self."
  },
  {
    "q": "لإنشاء نسخة عميقة (Deep Copy) لكائن ما، أي وحدة يجب استيرادها؟",
    "options": [
      "os",
      "copy",
      "sys"
    ],
    "correct": 1,
    "exp": "تُستخدم الدالة copy.deepcopy() لإنشاء نسخة عميقة للكائن."
  },
  {
    "q": "ماذا تفعل الدالة `filter()`؟",
    "options": [
      "تطبيق دالة على العناصر، والاحتفاظ فقط بالتي تُرجع True",
      "إزالة جميع العناصر المكررة من القائمة",
      "تحويل العناصر إلى أنواع بيانات مختلفة"
    ],
    "correct": 0,
    "exp": "تُطبق الدالة filter() دالة منطقية على كل عنصر في كائن قابل للتكرار وتُرجع العناصر التي تحقق الشرط."
  },
  {
    "q": "ما هي الدالة الخاصة التي تُستدعى عند محاولة استخدام العامل `-` بين كائنين؟",
    "options": [
      "__subtract__()",
      "__sub__()",
      "__minus__()"
    ],
    "correct": 1,
    "exp": "تُستخدم __sub__() لتخصيص سلوك الكائن عند استخدام العامل -."
  },
  {
    "q": "لإزالة جميع العناصر من قائمة، ما هي الطريقة الصحيحة؟",
    "options": [
      "list_name.remove_all()",
      "list_name.clear()",
      "del list_name"
    ],
    "correct": 1,
    "exp": "تُزيل list_name.clear() جميع العناصر من القائمة، بينما del list_name تحذف الكائن القائمة بالكامل."
  },
  {
    "q": "ما هي النتيجة المتوقعة للتعبير `'3' + 5`؟",
    "options": [
      "8",
      "35",
      "TypeError"
    ],
    "correct": 2,
    "exp": "لا يمكن دمج سلسلة نصية مع عدد صحيح مباشرة باستخدام عامل التشغيل +، مما يثير استثناء TypeError."
  },
  {
    "q": "ما هي الكلمة المفتاحية المستخدمة لإرجاع قيمة من دالة؟",
    "options": [
      "yield",
      "return",
      "output"
    ],
    "correct": 1,
    "exp": "تُستخدم الكلمة المفتاحية return لإنهاء تنفيذ الدالة وإرجاع قيمة (أو None)."
  },
  {
    "q": "ما هي دالة القاموس التي تُستخدم لإرجاع قائمة بأزواج مفتاح-قيمة؟",
    "options": [
      "values()",
      "keys()",
      "items()"
    ],
    "correct": 2,
    "exp": "تُرجع items() طريقة عرض جديدة لأزواج مفتاح-قيمة في القاموس كـ tuple."
  },
  {
    "q": "ماذا تفعل الدالة `split()` على سلسلة نصية؟",
    "options": [
      "تقسيم السلسلة النصية إلى قائمة بناءً على فاصل محدد",
      "تقسيم السلسلة النصية إلى سلسلة نصية جديدة",
      "دمج السلاسل النصية"
    ],
    "correct": 0,
    "exp": "تقوم الدالة split() بتقسيم السلسلة النصية بناءً على فاصل (Delimiter)، الافتراضي هو المسافة البيضاء، وتُرجع قائمة من السلاسل النصية."
  },
  {
    "q": "لتعريف متغير لا يمكن تعديله بعد إنشائه، أي نوع بيانات يمكن استخدامه؟",
    "options": [
      "List",
      "Tuple",
      "Dictionary"
    ],
    "correct": 1,
    "exp": "الـ Tuple غير قابلة للتغيير، مما يضمن أن قيمها لا تتغير بعد الإنشاء."
  },
  {
    "q": "ما هي الدالة الخاصة التي تُستدعى عند محاولة استخدام الكائن في عبارة `for...in`؟",
    "options": [
      "__loop__()",
      "__iter__()",
      "__range__()"
    ],
    "correct": 1,
    "exp": "يجب أن تحتوي الفئات القابلة للتكرار على الدالة __iter__()، والتي تُرجع كائن مُكرِّر (Iterator)."
  },
  {
    "q": "أي وحدة تُستخدم للتسلسل (Serialization) وفك التسلسل (Deserialization) لكائنات بايثون؟",
    "options": [
      "json",
      "pickle",
      "yaml"
    ],
    "correct": 1,
    "exp": "تُستخدم وحدة pickle لتسلسل (Pickle) وفك تسلسل (Unpickle) كائنات بايثون."
  },
  {
    "q": "ما هو دور الدالة `super()` بشكل أساسي في الفئات الابن؟",
    "options": [
      "إلغاء وراثة الخصائص",
      "استدعاء دوال الفئة الأب",
      "إنشاء كائن جديد من الفئة الابن"
    ],
    "correct": 1,
    "exp": "تُستخدم super() في الفئة الابن لاستدعاء طرق (Methods) الفئة الأب، لضمان تنفيذ الشيفرة الأم."
  },
  {
    "q": "ما هي النتيجة المتوقعة للتعبير `'a' in ['a', 'b', 'c']`؟",
    "options": [
      "0",
      "False",
      "True"
    ],
    "correct": 2,
    "exp": "عامل التشغيل in يتحقق مما إذا كانت القيمة موجودة ضمن التسلسل، مما ينتج عنه True."
  },
  {
    "q": "ما هو دور دالة `any()`؟",
    "options": [
      "إرجاع True إذا كانت جميع العناصر المنطقية في كائن قابل للتكرار صحيحة",
      "إرجاع True إذا كان أي عنصر منطقي في كائن قابل للتكرار صحيح",
      "إرجاع عدد العناصر"
    ],
    "correct": 1,
    "exp": "تُرجع any() True إذا كانت قيمة عنصر واحد على الأقل في المُكرِّر صحيحة (Truthy)."
  },
  {
    "q": "ما هو نوع الاستثناء الذي يتم رفعه عندما يكون تركيب الجملة (Syntax) غير صحيح؟",
    "options": [
      "IndentationError",
      "SyntaxError",
      "NameError"
    ],
    "correct": 1,
    "exp": "يتم رفع SyntaxError عندما لا يمكن لمفسر بايثون قراءة أو تحليل شيفرة المصدر."
  },
  {
    "q": "ماذا تفعل الدالة `round(3.5)`؟",
    "options": [
      "3",
      "4",
      "3.5"
    ],
    "correct": 1,
    "exp": "تقوم الدالة round() بالتقريب إلى أقرب عدد صحيح زوجي، لذا تقرب 3.5 إلى 4."
  },
  {
    "q": "ما هي الطريقة الصحيحة لتعريف معامل (Property) باستخدام الديكوراتور؟",
    "options": [
      "@var",
      "@property",
      "@attribute"
    ],
    "correct": 1,
    "exp": "الديكوراتور @property يُستخدم لتحويل دالة إلى معامل يمكن الوصول إليه كمتغير عادي."
  },
  {
    "q": "ما هي الدالة التي تُستخدم لفرز كائن قابل للتكرار وإرجاع قائمة جديدة (دون تغيير الأصل)؟",
    "options": [
      "sort()",
      "sorted()",
      "order()"
    ],
    "correct": 1,
    "exp": "الدالة sorted() تُنشئ وترجع قائمة جديدة مُفرزة، ولا تُغير الكائن القابل للتكرار الأصلي."
  },
  {
    "q": "ما هو الرمز الذي يُستخدم للتعليقات أحادية السطر (Single-line Comments) في بايثون؟",
    "options": [
      "//",
      "#",
      "---"
    ],
    "correct": 1,
    "exp": "يُستخدم الرمز # لبدء تعليق أحادي السطر في بايثون."
  },
  {
    "q": "ما هو دور الدالة `getattr()`؟",
    "options": [
      "تُرجع قائمة بالخصائص المتاحة",
      "الحصول على قيمة خاصية معينة من كائن بالاسم",
      "تعيين قيمة لخاصية"
    ],
    "correct": 1,
    "exp": "تُرجع الدالة getattr(obj, name, default) قيمة خاصية مُسماة للكائن."
  },
  {
    "q": "أي كلمة مفتاحية تُستخدم لتعريف كتلة من التعليمات البرمجية لتنفيذها إذا تم التعامل مع استثناء؟",
    "options": [
      "finally",
      "except",
      "try"
    ],
    "correct": 1,
    "exp": "الكلمة المفتاحية except تُستخدم لتحديد نوع الاستثناء الذي يجب التعامل معه والتعليمات البرمجية لتنفيذها."
  },
  {
    "q": "ما هي النتيجة المتوقعة للتعبير `tuple([1, 2, 3])`؟",
    "options": [
      "[1, 2, 3]",
      "(1, 2, 3)",
      "{1, 2, 3}"
    ],
    "correct": 1,
    "exp": "الدالة tuple() تحول الكائن القابل للتكرار إلى tuple، وهي محاطة بأقواس دائرية."
  },
  {
    "q": "ما هو نوع الاستثناء الذي يتم رفعه عند استخدام اسم متغير أو دالة غير معرف؟",
    "options": [
      "AttributeError",
      "NameError",
      "ImportError"
    ],
    "correct": 1,
    "exp": "يتم رفع NameError عندما لا يتم العثور على اسم محلي أو عام."
  },
  {
    "q": "ما هي الدالة التي تُستخدم لقراءة سطر واحد من ملف في كل مرة؟",
    "options": [
      "read()",
      "readlines()",
      "readline()"
    ],
    "correct": 2,
    "exp": "تقوم الدالة readline() بقراءة سطر واحد من الملف وتُرجع السلسلة النصية."
  },
  {
    "q": "لتحويل مجموعة (Set) إلى قائمة، ما هي الدالة التي تُستخدم؟",
    "options": [
      "list()",
      "set()",
      "tuple()"
    ],
    "correct": 0,
    "exp": "الدالة list() تحول المجموعة إلى قائمة، وتصبح عناصرها قابلة للترتيب وتسمح بالتكرار."
  },
  {
    "q": "ما هي النتيجة المتوقعة للتعبير `abs(-5.5)`؟",
    "options": [
      "-5.5",
      "5",
      "5.5"
    ],
    "correct": 2,
    "exp": "تُرجع الدالة abs() القيمة المطلقة (Absolute value) للرقم."
  },
  {
    "q": "أي كلمة مفتاحية تُستخدم لإنشاء متغير خاص (Private) في سياق الاتفاقية (Convention)؟",
    "options": [
      "باستخدام شرطة سفلية واحدة `_` كبادئة",
      "باستخدام شرطتين سفليتين `__` كبادئة",
      "باستخدام الكلمة المفتاحية `private`"
    ],
    "correct": 1,
    "exp": "الاسم الذي يبدأ بشرطتين سفليتين `__` (بدون شرطتين سفليتين في النهاية) يُشير إلى خاصية 'مُشوهة بالاسم' (Name Mangling) في بايثون، مما يجعل الوصول إليها صعباً من خارج الفئة، وهو الأقرب للخاصية الخاصة."
  },
  {
    "q": "ما هو نوع البيانات الذي يُنشأ عند استخدام التعبير `{1, 2, 3}`؟",
    "options": [
      "List",
      "Set",
      "Dictionary"
    ],
    "correct": 1,
    "exp": "تُستخدم الأقواس المعقوفة مع عناصر مفصولة بفواصل لإنشاء مجموعة (Set)."
  },
  {
    "q": "ما هو دور الدالة `all()`؟",
    "options": [
      "إرجاع True إذا كانت جميع العناصر المنطقية في كائن قابل للتكرار صحيحة",
      "إرجاع True إذا كان أي عنصر منطقي في كائن قابل للتكرار صحيح",
      "إرجاع عدد العناصر"
    ],
    "correct": 0,
    "exp": "تُرجع all() True إذا كانت قيمة جميع العناصر في المُكرِّر صحيحة (Truthy)، أو إذا كان المُكرِّر فارغاً."
  },
  {
    "q": "ما هي الدالة التي تُستخدم لإزالة المسافات البيضاء (Whitespace) من بداية ونهاية سلسلة نصية؟",
    "options": [
      "trim()",
      "strip()",
      "remove_space()"
    ],
    "correct": 1,
    "exp": "الدالة strip() تُرجع نسخة من السلسلة النصية مع إزالة المسافات البيضاء الرائدة والزائدة."
  },
  {
    "q": "ما هو الرمز الذي يُستخدم لعملية المساواة المنطقية (Logical NOT)؟",
    "options": [
      "!",
      "not",
      "~"
    ],
    "correct": 1,
    "exp": "تُستخدم الكلمة المفتاحية not للمساواة المنطقية في بايثون."
  },
  {
    "q": "ما هي الدالة التي تُستخدم لتنفيذ شيفرة بايثون من سلسلة نصية؟",
    "options": [
      "run()",
      "eval()",
      "execute()"
    ],
    "correct": 1,
    "exp": "الدالة eval() تقيّم (Evaluates) وتُنفذ تعبيراً صالحاً لسلسلة نصية من بايثون."
  },
  {
    "q": "ما هي الطريقة الصحيحة لتعريف دالة ذات قيمة إرجاع مُعلَّقة (Type Hint)؟",
    "options": [
      "def func() -> int:",
      "def func(): int",
      "def func() returns int:"
    ],
    "correct": 0,
    "exp": "يتم استخدام السهم `->` متبوعاً بنوع البيانات للإشارة إلى قيمة الإرجاع المُعلَّقة."
  },
  {
    "q": "ما هو الرمز الذي يُستخدم لعملية المساواة المنطقية (Logical AND)؟",
    "options": [
      "&&",
      "and",
      "&"
    ],
    "correct": 1,
    "exp": "تُستخدم الكلمة المفتاحية and لعملية المساواة المنطقية في بايثون."
  },
  {
    "q": "ما هي دالة القاموس التي تُستخدم لإدراج عنصر إذا كان المفتاح غير موجود بالفعل؟",
    "options": [
      "update()",
      "setdefault()",
      "insert()"
    ],
    "correct": 1,
    "exp": "تُرجع setdefault(key, default) قيمة المفتاح إذا كان موجوداً، وإلا تُدرج المفتاح بالقيمة الافتراضية وتُرجعها."
  },
  {
    "q": "ما هي الدالة التي تُستخدم للتحقق مما إذا كانت جميع الأحرف في سلسلة نصية أبجدية؟",
    "options": [
      "isnumeric()",
      "isalpha()",
      "isspace()"
    ],
    "correct": 1,
    "exp": "الدالة isalpha() تُرجع True إذا كانت جميع الأحرف أبجدية وكان هناك حرف واحد على الأقل، و False خلاف ذلك."
  },
  {
    "q": "ما هو نوع الاستثناء الذي يتم رفعه عند وجود مشكلة في المسافة البادئة (Indentation)؟",
    "options": [
      "TypeError",
      "IndentationError",
      "SyntaxError"
    ],
    "correct": 1,
    "exp": "يتم رفع IndentationError عند وجود مسافة بادئة غير صحيحة أو غير متوقعة."
  },
  {
    "q": "لإزالة عنصر عشوائي من قاموس، أي دالة تُستخدم؟",
    "options": [
      "popitem()",
      "remove()",
      "pop()"
    ],
    "correct": 0,
    "exp": "تُرجع popitem() زوج (مفتاح، قيمة) عشوائي وتُزيله من القاموس."
  },
  {
    "q": "ما هو الغرض من الدالة `iter()`؟",
    "options": [
      "تطبيق دالة على كل عنصر",
      "إرجاع كائن مُكرِّر (Iterator) لكائن قابل للتكرار",
      "تحويل الكائن إلى سلسلة نصية"
    ],
    "correct": 1,
    "exp": "تُنشئ الدالة iter() كائن مُكرِّر، مما يسمح بالتكرار يدوياً باستخدام next()."
  },
  {
    "q": "ما هو الرمز الذي يُستخدم لعملية المساواة المنطقية (Logical OR)؟",
    "options": [
      "||",
      "or",
      "|"
    ],
    "correct": 1,
    "exp": "تُستخدم الكلمة المفتاحية or لعملية المساواة المنطقية في بايثون."
  },
  {
    "q": "ما هي الدالة الخاصة التي تُستدعى عند محاولة استخدام الكائن كعنصر في قائمة أو مجموعة؟",
    "options": [
      "__hash__()",
      "__eq__()",
      "__contains__()"
    ],
    "correct": 0,
    "exp": "تُستخدم __hash__() لتمكين الكائن من أن يكون عنصراً في مجموعة أو مفتاحاً في قاموس (أي قابلاً للتجزئة - Hashable)."
  },
  {
    "q": "ماذا تعني `yield from` في دالة مولد (Generator)؟",
    "options": [
      "إرجاع قيمة واحدة وإنهاء المولد",
      "استدعاء دالة عادية",
      "تفويض التكرار إلى مولد أو كائن قابل للتكرار آخر"
    ],
    "correct": 2,
    "exp": "تُستخدم yield from لتفويض التحكم مباشرة إلى مولد فرعي أو كائن قابل للتكرار."
  },
  {
    "q": "ما هي النتيجة المتوقعة للتعبير `10 / 3` في بايثون؟",
    "options": [
      "3",
      "3.3333333333333335",
      "3.0"
    ],
    "correct": 1,
    "exp": "العملية / هي قسمة حقيقية (True Division) وتُرجع دائماً قيمة عائمة (Float)."
  },
  {
    "q": "ما هي الدالة التي تُستخدم لإضافة عنصر في موقع محدد داخل القائمة؟",
    "options": [
      "append()",
      "insert()",
      "add()"
    ],
    "correct": 1,
    "exp": "تأخذ الدالة insert(index, element) فهرساً وعنصراً لإضافته في ذلك الموقع."
  },
  {
    "q": "ما هو دور الدالة `hasattr()`؟",
    "options": [
      "التحقق مما إذا كان الكائن قابلاً للاستدعاء",
      "التحقق مما إذا كان الكائن يحتوي على خاصية مُسماة",
      "التحقق مما إذا كان الكائن من نوع معين"
    ],
    "correct": 1,
    "exp": "تُرجع hasattr(obj, name) True إذا كان الكائن يحتوي على الخاصية المحددة بالاسم."
  },
  {
    "q": "ما هو الرمز الذي يُستخدم لعملية 'الشيفت الأيسر' (Left Shift) على البتات؟",
    "options": [
      "<<",
      ">>",
      "^"
    ],
    "correct": 0,
    "exp": "الرمز << يُستخدم لعملية الشيفت الأيسر على مستوى البت (Bitwise Left Shift)."
  },
  {
    "q": "ما هي الوحدة (Module) القياسية التي تُستخدم للتعامل مع البيانات بتنسيق JSON؟",
    "options": [
      "js",
      "json",
      "data"
    ],
    "correct": 1,
    "exp": "الوحدة json توفر دوال للتسلسل وفك التسلسل لبيانات JSON."
  },
  {
    "q": "ما هي الدالة التي تُرجع قائمة بجميع قيم القاموس (Dictionary)؟",
    "options": [
      "values()",
      "keys()",
      "items()"
    ],
    "correct": 0,
    "exp": "الدالة values() تُرجع طريقة عرض جديدة لـ قيم القاموس."
  },
  {
    "q": "لإنهاء تنفيذ البرنامج بالكامل، أي دالة من وحدة `sys` تُستخدم؟",
    "options": [
      "sys.exit()",
      "sys.break()",
      "sys.stop()"
    ],
    "correct": 0,
    "exp": "تُستخدم sys.exit() لإنهاء تطبيق بايثون."
  },
  {
    "q": "ما هي الطريقة الصحيحة لتعريف دالة تقبل أي عدد من الوسائط الموضعية ووسائط الكلمات المفتاحية؟",
    "options": [
      "def func(*args):",
      "def func(**kwargs):",
      "def func(*args, **kwargs):"
    ],
    "correct": 2,
    "exp": "يتطلب قبول كليهما استخدام *args للوسائط الموضعية و **kwargs لوسائط الكلمات المفتاحية."
  },
  {
    "q": "ما هي النتيجة المتوقعة للتعبير `[1, 2, 3] + [4, 5, 6]`؟",
    "options": [
      "[5, 7, 9]",
      "[1, 2, 3, 4, 5, 6]",
      "خطأ"
    ],
    "correct": 1,
    "exp": "يؤدي عامل التشغيل + إلى دمج القائمتين إلى قائمة واحدة جديدة."
  },
  {
    "q": "ما هو نوع الاستثناء الذي يتم رفعه عندما تكون عملية استيراد (Import) وحدة فاشلة؟",
    "options": [
      "NameError",
      "ModuleNotFoundError",
      "IOError"
    ],
    "correct": 1,
    "exp": "يتم رفع ModuleNotFoundError عند محاولة استيراد وحدة غير موجودة."
  },
  {
    "q": "ما هو دور الدالة `setattr()`؟",
    "options": [
      "الحصول على قيمة خاصية",
      "تعيين قيمة لخاصية معينة لكائن بالاسم",
      "حذف خاصية"
    ],
    "correct": 1,
    "exp": "تُستخدم setattr(obj, name, value) لتعيين قيمة خاصية مُسماة للكائن."
  },
  {
    "q": "لتحويل سلسلة نصية إلى أحرف صغيرة (Lowercase)، ما هي الدالة التي تُستخدم؟",
    "options": [
      "lower_case()",
      "lowercase()",
      "lower()"
    ],
    "correct": 2,
    "exp": "الدالة lower() تُرجع نسخة من السلسلة النصية مع تحويل جميع الأحرف إلى أحرف صغيرة."
  },
  {
    "q": "أي كلمة مفتاحية تُستخدم لإنشاء كتلة شرطية؟",
    "options": [
      "for",
      "if",
      "while"
    ],
    "correct": 1,
    "exp": "تُستخدم الكلمة المفتاحية if لتنفيذ كتلة من التعليمات البرمجية إذا كان الشرط صحيحاً."
  },
  {
    "q": "ما هي الدالة التي تُستخدم للتحقق مما إذا كانت جميع الأحرف في سلسلة نصية هي أرقام؟",
    "options": [
      "isdigit()",
      "isnumeric()",
      "isdecimal()"
    ],
    "correct": 1,
    "exp": "الدالة isnumeric() تُرجع True إذا كانت جميع الأحرف أرقاماً (تشمل الأرقام العشرية والحروف الرقمية الأخرى)."
  },
  {
    "q": "ما هو دور `list.count(x)`؟",
    "options": [
      "إرجاع طول القائمة",
      "إرجاع عدد مرات ظهور العنصر x في القائمة",
      "التحقق مما إذا كان العنصر x موجوداً"
    ],
    "correct": 1,
    "exp": "تُرجع الدالة count(x) عدد المرات التي يظهر فيها العنصر x في القائمة."
  },
  {
    "q": "للتكرار على أزواج المفتاح والقيمة في قاموس، ما هي الدالة التي تُستخدم؟",
    "options": [
      "keys()",
      "values()",
      "items()"
    ],
    "correct": 2,
    "exp": "تسمح items() بالتكرار على كل من المفتاح والقيمة معاً."
  },
  {
    "q": "ما هي النتيجة المتوقعة للتعبير `10 / 2`؟",
    "options": [
      "5",
      "5.0",
      "4"
    ],
    "correct": 1,
    "exp": "القسمة الحقيقية / تُرجع دائماً قيمة عائمة (Float)، حتى لو كان الناتج عدداً صحيحاً."
  },
  {
    "q": "ما هو نوع الاستثناء الذي يتم رفعه عند انتهاء مُكرِّر (Iterator)؟",
    "options": [
      "IndexError",
      "StopIteration",
      "GeneratorExit"
    ],
    "correct": 1,
    "exp": "يتم رفع StopIteration بواسطة الدالة next() للإشارة إلى عدم وجود المزيد من العناصر التي سيتم إنتاجها."
  },
  {
    "q": "ما هي الوحدة (Module) القياسية التي تُستخدم للعمل مع التاريخ والوقت؟",
    "options": [
      "time",
      "datetime",
      "calendar"
    ],
    "correct": 1,
    "exp": "الوحدة datetime توفر فئات للتعامل مع التاريخ والوقت."
  },
  {
    "q": "لتحويل سلسلة نصية إلى أحرف كبيرة (Uppercase)، ما هي الدالة التي تُستخدم؟",
    "options": [
      "upper_case()",
      "uppercase()",
      "upper()"
    ],
    "correct": 2,
    "exp": "الدالة upper() تُرجع نسخة من السلسلة النصية مع تحويل جميع الأحرف إلى أحرف كبيرة."
  },
  {
    "q": "أي كلمة مفتاحية تُستخدم لإنشاء حلقة تستمر في التكرار طالما أن الشرط صحيح؟",
    "options": [
      "for",
      "while",
      "do-while"
    ],
    "correct": 1,
    "exp": "تُستخدم حلقة while للتكرار طالما أن التعبير الشرطي صحيح (True)."
  },
  {
    "q": "ما هو الغرض من الدالة `globals()`؟",
    "options": [
      "إرجاع القاموس الحالي لمساحة الاسم المحلية",
      "إرجاع القاموس الحالي لمساحة الاسم العامة",
      "تعيين المتغيرات كمتغيرات عامة"
    ],
    "correct": 1,
    "exp": "تُرجع الدالة globals() قاموس مساحة الاسم العامة الحالي للوحدة."
  },
  {
    "q": "ما هي الدالة التي تُستخدم للانضمام (Join) إلى قائمة من السلاسل النصية باستخدام فاصل محدد؟",
    "options": [
      "list.merge()",
      "separator.join(list)",
      "list.join(separator)"
    ],
    "correct": 1,
    "exp": "يتم استدعاء الدالة join() على سلسلة نصية (تكون الفاصل) وتأخذ قائمة من السلاسل النصية لدمجها."
  },س
    {
      "q": "ما ناتج print(2 + 3 * 2)؟",
      "code": "print(2 + 3 * 2)",
      "options": ["10", "8", "12"],
      "correct": 1,
      "exp": "الضرب أولاً: 3*2=6 ثم الجمع: 2+6=8"
    },
    {
      "q": "ما الدالة لمعرفة طول النص؟",
      "options": ["length()", "len()", "size()"],
      "correct": 1,
      "exp": "len() تُستخدم لمعرفة الطول"
    },
    {
      "q": "كيف ننشئ قائمة؟",
      "options": ["{1,2,3}", "[1,2,3]", "(1,2,3)"],
      "correct": 1,
      "exp": "القوائم تستخدم []"
    },
    {
      "q": "ما نوع True؟",
      "code": "type(True)",
      "options": ["bool", "int", "str"],
      "correct": 0,
      "exp": "True و False من نوع bool"
    },
    {
      "q": "كيف نضيف عنصر للقائمة؟",
      "code": "lst = [1,2,3]",
      "options": ["lst.add(4)", "lst.append(4)", "lst.insert(4)"],
      "correct": 1,
      "exp": "append() تضيف للنهاية"
    },
    {
      "q": "ما ناتج print('Hello' + 'World')؟",
      "code": "print('Hello' + 'World')",
      "options": ["HelloWorld", "Hello World", "خطأ"],
      "correct": 0,
      "exp": "+ يدمج النصوص معاً"
    },
    {
      "q": "كيف ننشئ متغير باسم x وقيمته 5؟",
      "options": ["x = 5", "var x = 5", "int x = 5"],
      "correct": 0,
      "exp": "في Python نستخدم = لتعريف المتغيرات"
    },
    {
      "q": "ما ناتج print(10 % 3)؟",
      "code": "print(10 % 3)",
      "options": ["3", "1", "0"],
      "correct": 1,
      "exp": "% تعطي باقي القسمة: 10 ÷ 3 = 3 والباقي 1"
    },
    {
      "q": "كيف نطبع النص 'مرحبا'؟",
      "options": ["print('مرحبا')", "echo('مرحبا')", "console.log('مرحبا')"],
      "correct": 0,
      "exp": "print() هي الدالة للطباعة في Python"
    },
    {
      "q": "ما نوع القيمة 3.14؟",
      "code": "type(3.14)",
      "options": ["int", "float", "double"],
      "correct": 1,
      "exp": "الأعداد العشرية من نوع float"
    },
    {
      "q": "كيف ننشئ قاموس؟",
      "options": ["{key: value}", "[key, value]", "(key, value)"],
      "correct": 0,
      "exp": "القواميس تستخدم {}"
    },
    {
      "q": "ما ناتج print(2 ** 3)؟",
      "code": "print(2 ** 3)",
      "options": ["6", "8", "9"],
      "correct": 1,
      "exp": "** تعني الأس: 2^3 = 8"
    },
    {
      "q": "كيف نتحقق إذا كانت x تساوي 5؟",
      "options": ["if x = 5:", "if x == 5:", "if x === 5:"],
      "correct": 1,
      "exp": "== تستخدم للمقارنة، = للتخصيص"
    },
    {
      "q": "ما ناتج print('Python'[0])؟",
      "code": "print('Python'[0])",
      "options": ["P", "y", "خطأ"],
      "correct": 0,
      "exp": "الفهرس 0 هو الحرف الأول"
    },
    {
      "q": "كيف ننشئ مجموعة (set)؟",
      "options": ["{1,2,3}", "[1,2,3]", "(1,2,3)"],
      "correct": 0,
      "exp": "المجموعات تستخدم {} ولكن بدون مفاتيح"
    },
    {
      "q": "ما ناتج print(bool(0))؟",
      "code": "print(bool(0))",
      "options": ["True", "False", "خطأ"],
      "correct": 1,
      "exp": "0 يعتبر False في التحويل إلى منطقي"
    },
    {
      "q": "كيف ننشئ دالة؟",
      "options": ["function my_func():", "def my_func():", "func my_func():"],
      "correct": 1,
      "exp": "def تستخدم لتعريف الدوال"
    },
    {
      "q": "ما ناتج print(7 // 2)؟",
      "code": "print(7 // 2)",
      "options": ["3.5", "3", "4"],
      "correct": 1,
      "exp": "// تقسم وتقرب لأسفل"
    },
    {
      "q": "كيف نتحقق إذا كانت x أكبر من 10؟",
      "options": ["if x > 10:", "if x >= 10:", "if x < 10:"],
      "correct": 0,
      "exp": "> تعني أكبر من"
    },
    {
      "q": "ما ناتج print('hi' * 3)؟",
      "code": "print('hi' * 3)",
      "options": ["hihihi", "hi hi hi", "خطأ"],
      "correct": 0,
      "exp": "* يكرر النص"
    },
    {
      "q": "كيف نستورد وحدة math؟",
      "options": ["import math", "include math", "require math"],
      "correct": 0,
      "exp": "import تستخدم لاستيراد الوحدات"
    },
    {
      "q": "ما ناتج print(abs(-5))؟",
      "code": "print(abs(-5))",
      "options": ["-5", "5", "خطأ"],
      "correct": 1,
      "exp": "abs() تعطي القيمة المطلقة"
    },
    {
      "q": "كيف ننشئ حلقة for لتكرار 5 مرات؟",
      "options": ["for i in 5:", "for i in range(5):", "for i from 0 to 5:"],
      "correct": 1,
      "exp": "range(5) يعطي الأرقام من 0 إلى 4"
    },
    {
      "q": "ما ناتج print(round(3.75))؟",
      "code": "print(round(3.75))",
      "options": ["3", "4", "3.8"],
      "correct": 1,
      "exp": "round() تقرب لأقرب عدد صحيح"
    },
    {
      "q": "كيف نتحقق إذا كان النص فارغاً؟",
      "code": "s = ''",
      "options": ["if s == '':", "if s.empty:", "if s is None:"],
      "correct": 0,
      "exp": "== '' تتحقق إذا كان النص فارغاً"
    },
    {
      "q": "ما ناتج print(min([3,1,4]))؟",
      "code": "print(min([3,1,4]))",
      "options": ["1", "3", "4"],
      "correct": 0,
      "exp": "min() تعطي أصغر قيمة في القائمة"
    },
    {
      "q": "كيف ننشئ tuple؟",
      "options": ["(1,2,3)", "[1,2,3]", "{1,2,3}"],
      "correct": 0,
      "exp": "Tuples تستخدم ()"
    },
    {
      "q": "ما ناتج print('hello'.upper())؟",
      "code": "print('hello'.upper())",
      "options": ["HELLO", "Hello", "hello"],
      "correct": 0,
      "exp": "upper() تحول النص لحروف كبيرة"
    },
    {
      "q": "كيف نستخدم التعليقات في Python؟",
      "options": ["// تعليق", "# تعليق", "/* تعليق */"],
      "correct": 1,
      "exp": "# تستخدم للتعليقات في Python"
    },
    {
      "q": "ما ناتج print(int('5'))؟",
      "code": "print(int('5'))",
      "options": ["5", "'5'", "خطأ"],
      "correct": 0,
      "exp": "int() تحول النص لعدد صحيح"
    },
    {
      "q": "كيف نستخدم الشرط if-else؟",
      "options": ["if x>5: ... else: ...", "if x>5 then ... else ...", "if (x>5) { ... } else { ... }"],
      "correct": 0,
      "exp": "if ... else ... هي صيغة Python"
    },
    {
      "q": "ما ناتج print(3 == '3')؟",
      "code": "print(3 == '3')",
      "options": ["True", "False", "خطأ"],
      "correct": 1,
      "exp": "3 عدد و'3' نص، لذا لا يتساويان"
    },
    {
      "q": "كيف نستخدم الدالة input()؟",
      "options": ["name = input()", "name = get_input()", "name = read()"],
      "correct": 0,
      "exp": "input() تقرأ المدخلات من المستخدم"
    },
    {
      "q": "ما ناتج print([1,2] + [3,4])؟",
      "code": "print([1,2] + [3,4])",
      "options": ["[1,2,3,4]", "[4,6]", "خطأ"],
      "correct": 0,
      "exp": "+ يدمج القوائم"
    },
    {
      "q": "كيف نستخدم الدالة range()؟",
      "options": ["range(5)", "range(0,5)", "كلاهما صحيح"],
      "correct": 2,
      "exp": "range(5) و range(0,5) يعطيان نفس النتيجة"
    },
    {
      "q": "ما ناتج print('Python'.find('th'))؟",
      "code": "print('Python'.find('th'))",
      "options": ["2", "3", "-1"],
      "correct": 0,
      "exp": "find() تعيد موقع النص الجزئي"
    },
    {
      "q": "كيف نستخدم try-except؟",
      "options": ["try: ... except: ...", "try { ... } catch { ... }", "try ... catch ..."],
      "correct": 0,
      "exp": "try: ... except: ... هي صيغة Python"
    },
    {
      "q": "ما ناتج print(not True)؟",
      "code": "print(not True)",
      "options": ["False", "True", "خطأ"],
      "correct": 0,
      "exp": "not تعكس القيمة المنطقية"
    },
    {
      "q": "كيف نستخدم الدالة open()؟",
      "options": ["open('file.txt')", "open('file.txt', 'r')", "كلاهما صحيح"],
      "correct": 2,
      "exp": "'r' هو الوضع الافتراضي لقراءة الملفات"
    },
    {
      "q": "ما ناتج print(3 > 2 and 4 < 5)؟",
      "code": "print(3 > 2 and 4 < 5)",
      "options": ["True", "False", "خطأ"],
      "correct": 0,
      "exp": "and تعطي True إذا كان الطرفان صحيحين"
    },
    {
      "q": "كيف نستخدم الدالة format()؟",
      "code": "name = 'Ahmed'",
      "options": ["'Hello {}'.format(name)", "f'Hello {name}'", "كلاهما صحيح"],
      "correct": 2,
      "exp": "كلا الطريقتين صحيحتان لتنسيق النصوص"
    },
    {
      "q": "ما ناتج print([i for i in range(3)])؟",
      "code": "print([i for i in range(3)])",
      "options": ["[0,1,2]", "[1,2,3]", "[0,1]"],
      "correct": 0,
      "exp": "قائمة الاستيعاب تنشئ قائمة من الأرقام"
    },
    {
      "q": "كيف نستخدم lambda؟",
      "options": ["lambda x: x*2", "function(x) {return x*2}", "(x) => x*2"],
      "correct": 0,
      "exp": "lambda تنشئ دوالاً صغيرة بدون اسم"
    },
    {
      "q": "ما ناتج print('a' in 'apple')؟",
      "code": "print('a' in 'apple')",
      "options": ["True", "False", "خطأ"],
      "correct": 0,
      "exp": "in تتحقق إذا كان الحرف موجوداً في النص"
    },
    {
      "q": "كيف نستخدم الدالة enumerate()؟",
      "options": ["for i, item in enumerate(lst):", "for i in enumerate(lst):", "for item in enumerate(lst):"],
      "correct": 0,
      "exp": "enumerate() تعيد الفهرس والقيمة"
    },
    {
      "q": "ما ناتج print(' hello '.strip())؟",
      "code": "print(' hello '.strip())",
      "options": ["hello", "'hello'", "خطأ"],
      "correct": 0,
      "exp": "strip() تزيل المسافات من الطرفين"
    },
    {
      "q": "كيف نستخدم الدالة zip()؟",
      "options": ["for a,b in zip(lst1, lst2):", "zip(lst1, lst2)", "كلاهما صحيح"],
      "correct": 2,
      "exp": "zip() تجمع عناصر من عدة قوائم"
    },
    {
      "q": "ما ناتج print(any([False, True, False]))؟",
      "code": "print(any([False, True, False]))",
      "options": ["True", "False", "خطأ"],
      "correct": 0,
      "exp": "any() تعطي True إذا كان أحد العناصر True"
    },
    {
      "q": "كيف نستخدم الدالة filter()؟",
      "options": ["filter(lambda x: x>0, lst)", "lst.filter(lambda x: x>0)", "كلاهما صحيح"],
      "correct": 0,
      "exp": "filter() ترشح العناصر بناءً على شرط"
    },
    {
      "q": "ما ناتج print('Python'.replace('P','J'))؟",
      "code": "print('Python'.replace('P','J'))",
      "options": ["Jython", "Python", "خطأ"],
      "correct": 0,
      "exp": "replace() تستبدل جزءاً من النص"
    },
    {
      "q": "كيف نستخدم الدالة map()؟",
      "options": ["map(lambda x: x*2, lst)", "lst.map(lambda x: x*2)", "كلاهما صحيح"],
      "correct": 0,
      "exp": "map() تطبق دالة على كل عنصر"
    },
    {
      "q": "ما ناتج print('Python'.split('t'))؟",
      "code": "print('Python'.split('t'))",
      "options": ["['Py','hon']", "['Pyth','on']", "خطأ"],
      "correct": 0,
      "exp": "split() تقسم النص عند الحرف المحدد"
    },
    {
      "q": "كيف نستخدم الدالة sorted()؟",
      "options": ["sorted(lst)", "lst.sorted()", "كلاهما صحيح"],
      "correct": 0,
      "exp": "sorted() ترتب القائمة"
    },
    {
      "q": "ما ناتج print('Python'[1:4])؟",
      "code": "print('Python'[1:4])",
      "options": ["yth", "Pyt", "thon"],
      "correct": 0,
      "exp": "التقطيع من الفهرس 1 إلى 3"
    },
    {
      "q": "كيف نستخدم الدالة reversed()؟",
      "options": ["reversed(lst)", "lst.reversed()", "كلاهما صحيح"],
      "correct": 0,
      "exp": "reversed() تعكس ترتيب العناصر"
    },
    {
      "q": "ما ناتج print('Python'.islower())؟",
      "code": "print('Python'.islower())",
      "options": ["False", "True", "خطأ"],
      "correct": 0,
      "exp": "islower() تتحقق إذا كانت كل الحروف صغيرة"
    },
    {
      "q": "كيف نستخدم الدالة sum()؟",
      "options": ["sum(lst)", "lst.sum()", "كلاهما صحيح"],
      "correct": 0,
      "exp": "sum() تجمع قيم القائمة"
    },
    {
      "q": "ما ناتج print('Python'.count('y'))؟",
      "code": "print('Python'.count('y'))",
      "options": ["1", "0", "2"],
      "correct": 0,
      "exp": "count() تعد تكرارات الحرف"
    },
    {
      "q": "كيف نستخدم الدالة max()؟",
      "options": ["max(lst)", "lst.max()", "كلاهما صحيح"],
      "correct": 0,
      "exp": "max() تعطي أكبر قيمة في القائمة"
    },
    {
      "q": "ما ناتج print('Python'[-1])؟",
      "code": "print('Python'[-1])",
      "options": ["n", "P", "خطأ"],
      "correct": 0,
      "exp": "الفهرس -1 يعني آخر عنصر"
    },
    {
      "q": "كيف نستخدم الدالة all()؟",
      "options": ["all(lst)", "lst.all()", "كلاهما صحيح"],
      "correct": 0,
      "exp": "all() تعطي True إذا كانت كل العناصر True"
    },
    {
      "q": "ما ناتج print('Python'.startswith('P'))؟",
      "code": "print('Python'.startswith('P'))",
      "options": ["True", "False", "خطأ"],
      "correct": 0,
      "exp": "startswith() تتحقق إذا كان النص يبدأ بحرف معين"
    },
    {
      "q": "كيف نستخدم الدالة isinstance()؟",
      "options": ["isinstance(x, int)", "x.isinstance(int)", "كلاهما صحيح"],
      "correct": 0,
      "exp": "isinstance() تتحقق من نوع الكائن"
    },
    {
      "q": "ما ناتج print('Python'.endswith('n'))؟",
      "code": "print('Python'.endswith('n'))",
      "options": ["True", "False", "خطأ"],
      "correct": 0,
      "exp": "endswith() تتحقق إذا كان النص ينتهي بحرف معين"
    },
    {
      "q": "كيف نستخدم الدالة dir()؟",
      "options": ["dir(obj)", "obj.dir()", "كلاهما صحيح"],
      "correct": 0,
      "exp": "dir() تعرض خصائص وطرق الكائن"
    },
    {
      "q": "ما ناتج print('Python'.isalpha())؟",
      "code": "print('Python'.isalpha())",
      "options": ["True", "False", "خطأ"],
      "correct": 0,
      "exp": "isalpha() تتحقق إذا كان النص يحتوي على أحرف فقط"
    },
    {
      "q": "كيف نستخدم الدالة help()؟",
      "options": ["help(obj)", "obj.help()", "كلاهما صحيح"],
      "correct": 0,
      "exp": "help() تعرض وثائق الكائن"
    },
    {
      "q": "ما ناتج print('Python'.isdigit())؟",
      "code": "print('Python'.isdigit())",
      "options": ["False", "True", "خطأ"],
      "correct": 0,
      "exp": "isdigit() تتحقق إذا كان النص يحتوي على أرقام فقط"
    },
    {
      "q": "كيف نستخدم الدالة id()؟",
      "options": ["id(obj)", "obj.id()", "كلاهما صحيح"],
      "correct": 0,
      "exp": "id() تعيد معرف الكائن في الذاكرة"
    },
    {
      "q": "ما ناتج print('Python'.isalnum())؟",
      "code": "print('Python'.isalnum())",
      "options": ["True", "False", "خطأ"],
      "correct": 0,
      "exp": "isalnum() تتحقق إذا كان النص يحتوي على أحرف وأرقام فقط"
    },
    {
      "q": "كيف نستخدم الدالة globals()؟",
      "options": ["globals()", "global.vars()", "كلاهما صحيح"],
      "correct": 0,
      "exp": "globals() تعيد قاموس المتغيرات العامة"
    },
    {
      "q": "ما ناتج print('Python'.isspace())؟",
      "code": "print('Python'.isspace())",
      "options": ["False", "True", "خطأ"],
      "correct": 0,
      "exp": "isspace() تتحقق إذا كان النص يحتوي على مسافات فقط"
    },
    {
      "q": "كيف نستخدم الدالة locals()؟",
      "options": ["locals()", "local.vars()", "كلاهما صحيح"],
      "correct": 0,
      "exp": "locals() تعيد قاموس المتغيرات المحلية"
    },
    {
      "q": "ما ناتج print('Python'.istitle())؟",
      "code": "print('Python'.istitle())",
      "options": ["True", "False", "خطأ"],
      "correct": 0,
      "exp": "istitle() تتحقق إذا كان النص يبدأ بحرف كبير والباقي صغير"
    },
    {
      "q": "كيف نستخدم الدالة vars()؟",
      "options": ["vars(obj)", "obj.vars()", "كلاهما صحيح"],
      "correct": 0,
      "exp": "vars() تعيد خصائص الكائن"
    },
    {
      "q": "ما ناتج print('Python'.capitalize())؟",
      "code": "print('Python'.capitalize())",
      "options": ["Python", "python", "خطأ"],
      "correct": 0,
      "exp": "capitalize() تحول الحرف الأول لكبير والباقي صغير"
    },
    {
      "q": "كيف نستخدم الدالة type()؟",
      "options": ["type(obj)", "obj.type()", "كلاهما صحيح"],
      "correct": 0,
      "exp": "type() تعيد نوع الكائن"
    },
    {
      "q": "ما ناتج print('Python'.swapcase())؟",
      "code": "print('Python'.swapcase())",
      "options": ["pYTHON", "PYTHON", "python"],
      "correct": 0,
      "exp": "swapcase() تعكس حالة الأحرف"
    },
    {
      "q": "كيف نستخدم الدالة callable()؟",
      "options": ["callable(obj)", "obj.callable()", "كلاهما صحيح"],
      "correct": 0,
      "exp": "callable() تتحقق إذا كان الكائن يمكن استدعاؤه كدالة"
    },
    {
      "q": "ما ناتج print('Python'.title())؟",
      "code": "print('Python'.title())",
      "options": ["Python", "Python", "خطأ"],
      "correct": 0,
      "exp": "title() تحول أول حرف من كل كلمة لكبير"
    },
    {
      "q": "كيف نستخدم الدالة hasattr()؟",
      "options": ["hasattr(obj, 'attr')", "obj.hasattr('attr')", "كلاهما صحيح"],
      "correct": 0,
      "exp": "hasattr() تتحقق إذا كان الكائن يحتوي على خاصية معينة"
    },
    {
      "q": "ما ناتج print('Python'.center(10))؟",
      "code": "print('Python'.center(10))",
      "options": ["  Python  ", "Python    ", "    Python"],
      "correct": 0,
      "exp": "center() توسع النص ليشغل عرضاً محدداً"
    },
    {
      "q": "كيف نستخدم الدالة getattr()؟",
      "options": ["getattr(obj, 'attr')", "obj.getattr('attr')", "كلاهما صحيح"],
      "correct": 0,
      "exp": "getattr() تعيد قيمة خاصية الكائن"
    },
    {
      "q": "ما ناتج print('Python'.ljust(10))؟",
      "code": "print('Python'.ljust(10))",
      "options": ["Python    ", "  Python  ", "    Python"],
      "correct": 0,
      "exp": "ljust() توسع النص لليمين"
    },
    {
      "q": "كيف نستخدم الدالة setattr()؟",
      "options": ["setattr(obj, 'attr', value)", "obj.setattr('attr', value)", "كلاهما صحيح"],
      "correct": 0,
      "exp": "setattr() تضبط قيمة خاصية الكائن"
    },
    {
      "q": "ما ناتج print('Python'.rjust(10))؟",
      "code": "print('Python'.rjust(10))",
      "options": ["    Python", "Python    ", "  Python  "],
      "correct": 0,
      "exp": "rjust() توسع النص لليسار"
    },
    {
      "q": "كيف نستخدم الدالة delattr()؟",
      "options": ["delattr(obj, 'attr')", "obj.delattr('attr')", "كلاهما صحيح"],
      "correct": 0,
      "exp": "delattr() تحذف خاصية الكائن"
    },
    {
      "q": "ما ناتج print('Python'.zfill(10))؟",
      "code": "print('Python'.zfill(10))",
      "options": ["0000Python", "Python0000", "خطأ"],
      "correct": 0,
      "exp": "zfill() تملأ النص بأصفار من اليسار"
    },
    {
      "q": "كيف نستخدم الدالة property()؟",
      "options": ["property(fget, fset, fdel)", "obj.property()", "كلاهما صحيح"],
      "correct": 0,
      "exp": "property() تنشئ خاصية للكائن"
    },
    {
      "q": "ما ناتج print('Python'.partition('t'))؟",
      "code": "print('Python'.partition('t'))",
      "options": ["('Py', 't', 'hon')", "('Pyth', 't', 'on')", "خطأ"],
      "correct": 0,
      "exp": "partition() تقسم النص إلى 3 أجزاء"
    },
    {
      "q": "كيف نستخدم الدالة staticmethod()؟",
      "options": ["staticmethod(func)", "obj.staticmethod()", "كلاهما صحيح"],
      "correct": 0,
      "exp": "staticmethod() تنشئ دالة ثابتة للكلاس"
    },
    {
      "q": "ما ناتج print('Python'.rpartition('t'))؟",
      "code": "print('Python'.rpartition('t'))",
      "options": ["('Py', 't', 'hon')", "('Pyth', 't', 'on')", "خطأ"],
      "correct": 0,
      "exp": "rpartition() تقسم النص من اليمين"
    },
    {
      "q": "كيف نستخدم الدالة classmethod()؟",
      "options": ["classmethod(func)", "obj.classmethod()", "كلاهما صحيح"],
      "correct": 0,
      "exp": "classmethod() تنشئ دالة كلاس"
    },
    {
      "q": "ما ناتج print('Python'.rsplit('t'))؟",
      "code": "print('Python'.rsplit('t'))",
      "options": ["['Py','hon']", "['Pyth','on']", "خطأ"],
      "correct": 0,
      "exp": "rsplit() تقسم النص من اليمين"
    },
    {
      "q": "كيف نستخدم الدالة super()؟",
      "options": ["super()", "obj.super()", "كلاهما صحيح"],
      "correct": 0,
      "exp": "super() تعيد كائن الأب"
    },
    {
      "q": "ما ناتج print('Python'.splitlines())؟",
      "code": "print('Python'.splitlines())",
      "options": ["['Python']", "['P','y','t','h','o','n']", "خطأ"],
      "correct": 0,
      "exp": "splitlines() تقسم النص عند الأسطر الجديدة"
    },
    {
      "q": "كيف نستخدم الدالة __init__()؟",
      "options": ["def __init__(self):", "def init(self):", "كلاهما صحيح"],
      "correct": 0,
      "exp": "__init__() هي دالة البناء للكلاس"
    },
    {
      "q": "ما ناتج print('Python'.join(['a','b']))؟",
      "code": "print('Python'.join(['a','b']))",
      "options": ["aPythonb", "a b", "خطأ"],
      "correct": 0,
      "exp": "join() تدمج القائمة باستخدام النص كفاصل"
    },
    {
      "q": "كيف نستخدم الدالة __str__()؟",
      "options": ["def __str__(self):", "def str(self):", "كلاهما صحيح"],
      "correct": 0,
      "exp": "__str__() تعيد تمثيل النص للكائن"
    },
    {
      "q": "ما ناتج print('Python'.encode())؟",
      "code": "print('Python'.encode())",
      "options": ["b'Python'", "'Python'", "خطأ"],
      "correct": 0,
      "exp": "encode() تحول النص لبايتات"
    },
    {
      "q": "كيف نستخدم الدالة __repr__()؟",
      "options": ["def __repr__(self):", "def repr(self):", "كلاهما صحيح"],
      "correct": 0,
      "exp": "__repr__() تعيد تمثيل الكائن للتصحيح"
    },
    {
      "q": "ما ناتج print(b'Python'.decode())؟",
      "code": "print(b'Python'.decode())",
      "options": ["Python", "b'Python'", "خطأ"],
      "correct": 0,
      "exp": "decode() تحول البايتات لنص"
    },
    {
      "q": "كيف نستخدم الدالة __len__()؟",
      "options": ["def __len__(self):", "def len(self):", "كلاهما صحيح"],
      "correct": 0,
      "exp": "__len__() تعيد طول الكائن"
    },
    {
      "q": "ما ناتج print(ascii('Python'))؟",
      "code": "print(ascii('Python'))",
      "options": ["'Python'", "Python", "خطأ"],
      "correct": 0,
      "exp": "ascii() تعيد تمثيل ASCII للنص"
    },
    {
      "q": "كيف نستخدم الدالة __getitem__()؟",
      "options": ["def __getitem__(self, key):", "def getitem(self, key):", "كلاهما صحيح"],
      "correct": 0,
      "exp": "__getitem__() تمكن الكائن من استخدام الفهرس"
    },
    {
      "q": "ما ناتج print(bin(5))؟",
      "code": "print(bin(5))",
      "options": ["0b101", "101", "خطأ"],
      "correct": 0,
      "exp": "bin() تحول العدد لنظام ثنائي"
    },
    {
      "q": "كيف نستخدم الدالة __setitem__()؟",
      "options": ["def __setitem__(self, key, value):", "def setitem(self, key, value):", "كلاهما صحيح"],
      "correct": 0,
      "exp": "__setitem__() تمكن الكائن من تعيين القيم بالفهرس"
    },
    {
      "q": "ما ناتج print(oct(8))؟",
      "code": "print(oct(8))",
      "options": ["0o10", "10", "خطأ"],
      "correct": 0,
      "exp": "oct() تحول العدد لنظام ثماني"
    },
    {
      "q": "كيف نستخدم الدالة __delitem__()؟",
      "options": ["def __delitem__(self, key):", "def delitem(self, key):", "كلاهما صحيح"],
      "correct": 0,
      "exp": "__delitem__() تمكن الكائن من حذف العناصر بالفهرس"
    },
    {
      "q": "ما ناتج print(hex(16))؟",
      "code": "print(hex(16))",
      "options": ["0x10", "10", "خطأ"],
      "correct": 0,
      "exp": "hex() تحول العدد لنظام ست عشري"
    },
    {
      "q": "كيف نستخدم الدالة __iter__()؟",
      "options": ["def __iter__(self):", "def iter(self):", "كلاهما صحيح"],
      "correct": 0,
      "exp": "__iter__() تجعل الكائن قابلاً للتكرار"
    },
    {
      "q": "ما ناتج print(chr(65))؟",
      "code": "print(chr(65))",
      "options": ["A", "65", "خطأ"],
      "correct": 0,
      "exp": "chr() تحول الرقم لحرف Unicode"
    },
    {
      "q": "كيف نستخدم الدالة __next__()؟",
      "options": ["def __next__(self):", "def next(self):", "كلاهما صحيح"],
      "correct": 0,
      "exp": "__next__() تعيد العنصر التالي في التكرار"
    },
    {
      "q": "ما ناتج print(ord('A'))؟",
      "code": "print(ord('A'))",
      "options": ["65", "A", "خطأ"],
      "correct": 0,
      "exp": "ord() تحول الحرف لرقم Unicode"
    },
    {
      "q": "كيف نستخدم الدالة __contains__()؟",
      "options": ["def __contains__(self, item):", "def contains(self, item):", "كلاهما صحيح"],
      "correct": 0,
      "exp": "__contains__() تمكن الكائن من استخدام in"
    },
    {
      "q": "ما ناتج print(pow(2, 3))؟",
      "code": "print(pow(2, 3))",
      "options": ["8", "6", "9"],
      "correct": 0,
      "exp": "pow() تحسب الأس: 2^3 = 8"
    },
    {
      "q": "كيف نستخدم الدالة __call__()؟",
      "options": ["def __call__(self, *args):", "def call(self, *args):", "كلاهما صحيح"],
      "correct": 0,
      "exp": "__call__() تجعل الكائن قابلاً للاستدعاء"
    },
    {
      "q": "ما ناتج print(divmod(7, 3))؟",
      "code": "print(divmod(7, 3))",
      "options": ["(2, 1)", "(2, 2)", "(3, 1)"],
      "correct": 0,
      "exp": "divmod() تعيد ناتج القسمة والباقي"
    },
    {
      "q": "كيف نستخدم الدالة __enter__()؟",
      "options": ["def __enter__(self):", "def enter(self):", "كلاهما صحيح"],
      "correct": 0,
      "exp": "__enter__() تدير بداية كتلة with"
    },
    {
      "q": "ما ناتج print(complex(3, 4))؟",
      "code": "print(complex(3, 4))",
      "options": ["(3+4j)", "3+4j", "خطأ"],
      "correct": 0,
      "exp": "complex() تنشئ عدداً مركباً"
    },
    {
      "q": "كيف نستخدم الدالة __exit__()؟",
      "options": ["def __exit__(self, type, value, traceback):", "def exit(self, type, value, traceback):", "كلاهما صحيح"],
      "correct": 0,
      "exp": "__exit__() تدير نهاية كتلة with"
    }
  ]
}